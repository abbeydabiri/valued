package frontend

import (
	"valued/database"
	"valued/functions"

	"fmt"
	// "html"
	"net/http"
	"strconv"
)

type AppHome struct {
	functions.Templates
	mapCache map[string]interface{}
	pageMap  map[string]interface{}
}

func (this *AppHome) Process(httpRes http.ResponseWriter, httpReq *http.Request, curdb database.Database) {

	httpRes.Header().Set("content-type", "application/json")

	if httpReq.Method != "POST" {
		http.Redirect(httpRes, httpReq, "/", http.StatusMovedPermanently)
	}

	GOSESSID, _ := httpReq.Cookie(_COOKIE_)
	this.mapCache = curdb.GetSession(GOSESSID.Value, "mapCache")

	switch httpReq.FormValue("action") {
	default:
		fallthrough
	case "":
		this.pageMap = make(map[string]interface{})
		this.pageMap["app-home"] = this.search(httpReq, curdb)

		contentHTML := strconv.Quote(string(this.Generate(this.pageMap, nil)))
		httpRes.Write([]byte(`{"pageTitle":"Valued Home","pageContent":` + contentHTML + `}`))
		return

	case "search":
		searchResult := this.search(httpReq, curdb)
		contentHTML := strconv.Quote(string(this.Generate(searchResult, nil)))
		httpRes.Write([]byte(`{"searchresult":` + contentHTML + `}`))
		return
	}
}

func (this *AppHome) search(httpReq *http.Request, curdb database.Database) map[string]interface{} {

	formSearch := make(map[string]interface{})
	appCategory := make(map[string]interface{})

	tblAppHome := new(database.Category)
	xDocrequest := make(map[string]interface{})

	xDocrequest["limit"] = "100"
	xDocrequest["offset"] = "0"
	xDocrequest["workflow"] = "active"

	iCounter := 1
	iMaxCounter := 4

	xDocresult := tblAppHome.Search(xDocrequest, curdb)

	aSortedMap := this.SortMap(xDocresult)
	for _, cNumber := range aSortedMap {
		xDocInterface := xDocresult[cNumber]

		// for cNumber, xDoc := range xDocresult {
		switch iCounter {
		case iMaxCounter:
			iCounter = 1
		case 1:
			appCategory = make(map[string]interface{})
			formSearch[cNumber+"#app-home-page"] = appCategory
			fallthrough
		default:
			iCounter++
		}

		xDoc := xDocInterface.(map[string]interface{})
		iNumber, _ := strconv.Atoi(cNumber)
		switch iNumber % iMaxCounter {
		default:
			xDoc["class"] = "appCatFull"
		case 2:
			xDoc["class"] = "appCatLeft"
		case 3:
			xDoc["class"] = "appCatRight"
		}
		xDoc["onclick"] = fmt.Sprintf("getForm('/app-reward?category=%s')", xDoc["control"])
		appCategory[cNumber+"#app-home-page-category"] = xDoc
	}

	if len(appCategory) < iMaxCounter {
		iLockedCounter := (len(appCategory) % iMaxCounter) + 1
		for iLockedCounter <= iMaxCounter {

			switch iLockedCounter {
			case 1:
				appCategory = make(map[string]interface{})
				formSearch["0#app-home-page"] = appCategory
				fallthrough
			default:
				iCounter++
			}

			xDoc := make(map[string]interface{})
			switch iLockedCounter {
			default:
				xDoc["class"] = "appCatFull"
			case 2:
				xDoc["class"] = "appCatLeft"
			case 3:
				xDoc["class"] = "appCatRight"
			}

			xDoc["image"] = "files/img/logosquare.png"
			xDoc["onclick"] = "error('Locked Category is Not Yet Available')"
			xDoc["title"] = "<small>LOCKED CATEGORY <br> NOT YET AVAILABLE</small>"

			cNumber := fmt.Sprintf("%d", iLockedCounter+len(xDocresult))
			appCategory[cNumber+"#app-home-page-category"] = xDoc
			iLockedCounter++
		}
	}

	return formSearch
}
